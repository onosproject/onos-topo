/*
Copyright 2019-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

// Package admin defines the administrative and diagnostic gRPC interfaces.
package proto;

// AddDeviceRequest adds a device to the topology
message AddDeviceRequest {

}

// AddDeviceResponse is sent in response to an AddDeviceRequest
message AddDeviceResponse {

}

// GetDeviceRequest gets a device by ID
message GetDeviceRequest {
    string device_id = 1;
}

// GetDeviceResponse carries a device
message GetDeviceResponse {
    Device device = 1;
}

// GetDevicesRequest gets a list of devices in the topology
message GetDevicesRequest {

}

// GetDevicesResponse carries a list of devices
message GetDevicesResponse {
    Device device = 1;
}

// RemoveDeviceRequest removes a device by ID
message RemoveDeviceRequest {
    string device_id = 1;
}

// RemoveDeviceResponse is sent in response to a RemoveDeviceRequest
message RemoveDeviceResponse {

}

// StreamDevicesRequest requests a stream of device changes
// By default, the request requests a stream of all device events that occur *after* the request is
// received by the service. However, if `all` is `true`, the stream is prefixed by a device `ADD` event
// for each existing device in the store.
message StreamDevicesRequest {

    // all indicates whether to initially stream existing devices in the store
    bool all = 1;
}

// StreamDevicesResponse carries a single device event
message StreamDevicesResponse {

    // type is the type of the event
    Type type = 1;

    // device is the device on which the event occurred
    Device device = 2;

    // Device event type
    enum Type {
        // ADD occurs when a device is added to the topology
        ADD = 0;

        // UPDATE occurs when a device is updated
        UPDATE = 1;

        // REMOVE occurs when a device is removed from the topology
        REMOVE = 2;
    }
}

// Device contains information about a device
message Device {
    // id is a globally unique device identifier
    string id = 1;

    // address is the host:port of the device
    string address = 2;

    // target is the device target
    string target = 3;

    // version is the device version
    string version = 4;

    // timeout indicates the device request timeout
    int64 timeout = 5;

    // credentials contains the credentials for connecting to the device
    Credentials credentials = 6;

    // tls is the device TLS configuration
    TlsConfig tls = 7;
}

// Credentials is the device credentials
message Credentials {

    // user is the user with which to connect to the device
    string user = 1;

    // password is the password for connecting to the device
    string password = 2;
}

// Device TLS configuration
message TlsConfig {

    // caCert is the name of the device's CA certificate
    string caCert = 3;

    // cert is the name of the device's certificate
    string cert = 4;

    // key is the name of the device's TLS key
    string key = 5;

    // plain indicates whether to connect to the device over plaintext
    bool plain = 6;

    // insecure indicates whether to connect to the device with insecure communication
    bool insecure = 7;
}

// DeviceService provides an API for managing devices.
service DeviceService {

    // AddDevice adds a device to the topology
    rpc AddDevice(AddDeviceRequest) returns (AddDeviceResponse) {
    }

    // GetDevice gets a device by ID
    rpc GetDevice(GetDeviceRequest) returns (GetDeviceResponse) {
    }

    // GetDevices gets a list of devices
    rpc GetDevices(GetDevicesRequest) returns (stream GetDevicesResponse) {
    }

    // RemoveDevice removes a device from the topology
    rpc RemoveDevice(RemoveDeviceRequest) returns (RemoveDeviceResponse) {
    }

    // StreamDevices gets a stream of device add/update/remove events
    rpc StreamDevices(StreamDevicesRequest) returns (stream StreamDevicesResponse) {
    }

}
