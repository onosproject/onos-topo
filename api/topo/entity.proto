/*
Copyright 2019-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

// Package topo defines interfaces for managing entities.
package topo;

import "gogoproto/gogo.proto";

// AddRequest adds a entity to the topology
message AddRequest {
    string kind = 1 [(gogoproto.casttype) = "EntityKind"];
    string id = 2 [(gogoproto.casttype) = "EntityID"];
}

// AddResponseose is sent in response to an AddRequest
message AddResponse {
}

// UpdateRequest updates a entity
message UpdateRequest {
    string kind = 1 [(gogoproto.casttype) = "EntityKind"];
    string id = 2 [(gogoproto.casttype) = "EntityID"];
    map<string, string> attr = 3 [(gogoproto.castkey) = "AttrKind", (gogoproto.castvalue) = "AttrVal"];
}

// UpdateResponse is sent in response to an UpdateRequest
message UpdateResponse {
}

// GetRequest ...
message GetRequest {
    string kind = 1 [(gogoproto.casttype) = "EntityKind"];
    string id = 2 [(gogoproto.casttype) = "EntityID"];
    string attrKind = 3 [(gogoproto.casttype) = "AttrKind"];
}

// GetRequestsResp carries a entity
message GetResponse {
    map<string, string> attr = 3 [(gogoproto.castkey) = "AttrKind", (gogoproto.castvalue) = "AttrVal"];
}

// ListRequest requests a stream of entities and changes
// By default, the request requests a stream of all entities that are present in the topology when
// the request is received by the service. However, if `subscribe` is `true`, the stream will remain
// open after all entities have been sent and events that occur following the last entity will be
// streamed to the client until the stream is closed.
message ListRequest {

    // subscribe indicates whether to subscribe to events (e.g. ADD, UPDATE, and REMOVE) that occur
    // after all entities have been streamed to the client
    bool subscribe = 1;
}

// ListResponse carries a single device event
message ListResponse {

    // type is the type of the event
    Type type = 1;

    // kind of the entity on which the event occurred
    string kind = 2 [(gogoproto.casttype) = "EntityKind"];

    // id of the entity on which the event occurred
    string id = 3 [(gogoproto.casttype) = "EntityID"];

    // attr is the map of attributes on which this event occurred
    map<string, string> attr = 4 [(gogoproto.castkey) = "AttrKind", (gogoproto.castvalue) = "AttrVal"];

    // Device event type
    enum Type {
        // NONE indicates this response does not represent a state change
        NONE = 0;

        // ADDED is an event which occurs when a device is added to the topology
        ADDED = 1;

        // UPDATED is an event which occurs when a device is updated
        UPDATED = 2;

        // REMOVED is an event which occurs when a device is removed from the topology
        REMOVED = 3;
    }
}

// RemoveRequest removes a entity by ID
message RemoveRequest {
    string kind = 1 [(gogoproto.casttype) = "EntityKind"];
    string id = 2 [(gogoproto.casttype) = "EntityID"];
}

// RemoveResponse is sent in response to a RemoveRequest
message RemoveResponse {
}

// EntityService provides an API for managing entities.
service entityService {

    // Add adds a entity to the topology
    rpc Add (AddRequest) returns (AddResponse) {
    }

    // Update adds/updates an entity's attributes
    rpc Update (UpdateRequest) returns (UpdateResponse) {
    }

    // Get gets an entity's attributes
    rpc Get (GetRequest) returns (GetResponse) {
    }

    // List gets a stream of entity add/update/remove events
    rpc List (ListRequest) returns (stream ListResponse) {
    }

    // Remove removes a entity from the topology
    rpc Remove (RemoveRequest) returns (RemoveResponse) {
    }
}
