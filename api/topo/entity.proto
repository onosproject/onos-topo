/*
Copyright 2019-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

// Package topo defines interfaces for managing entities.
package topo;

import "gogoproto/gogo.proto";

// AddEntityReq adds a entity to the topology
message AddEntityReq {
    string kind = 1 [(gogoproto.casttype) = "EntityKind"];
    string id = 2 [(gogoproto.casttype) = "EntityID"];
}

// AddEntityRespose is sent in response to an AddEntityReq
message AddEntityRespose {
}

// UpdateEntityReq updates a entity
message UpdateEntityReq {
    string kind = 1 [(gogoproto.casttype) = "EntityKind"];
    string id = 2 [(gogoproto.casttype) = "EntityID"];
}

// UpdateEntityResp is sent in response to an UpdateEntityReq
message UpdateEntityResp {
}

// GetAttrReq ...
message GetAttrReq {
    string kind = 1 [(gogoproto.casttype) = "EntityKind"];
    string id = 2 [(gogoproto.casttype) = "EntityID"];
    string attrKind = 3 [(gogoproto.casttype) = "AttrKind"];
}

// GetAttrsResp carries a entity
message GetAttrResp {
    string kind = 1 [(gogoproto.casttype) = "EntityKind"];
    string id = 2 [(gogoproto.casttype) = "EntityID"];
    map<string, string> attr = 3 [(gogoproto.castkey) = "AttrKind", (gogoproto.castvalue) = "AttrVal"];
}

// RemoveEntityReq removes a entity by ID
message RemoveEntityReq {
    string kind = 1 [(gogoproto.casttype) = "EntityKind"];
    string id = 2 [(gogoproto.casttype) = "EntityID"];
}

// RemoveEntityResp is sent in response to a RemoveEntityReq
message RemoveEntityResp {
}

// EntityService provides an API for managing entities.
service entityService {

    // Add adds a entity to the topology
    rpc Add (AddEntityReq) returns (AddEntityRespose) {
    }

    // Update updates a entity
    rpc Update (UpdateEntityReq) returns (UpdateEntityResp) {
    }

    // Get gets a entity by ID
    rpc GetAttr (GetAttrReq) returns (GetAttrResp) {
    }

    // Remove removes a entity from the topology
    rpc RemoveEntity (RemoveEntityReq) returns (RemoveEntityResp) {
    }
}
