/*
Copyright 2019-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

// Package topo defines interfaces for managing network top
package topo;

// EntityService provides an API for managing entities.
service topo {
  // Update one or more entities to the topology
  rpc Write (WriteRequest) returns (WriteResponse) {
  }

  // Read one or more entities from topology
  rpc Read (ReadRequest) returns (ReadResponse) {
  }

  // Represents the bidirectional stream between
  // onos-topo and a client for the purpose of
  // - streaming notifications
  rpc StreamChannel (stream StreamMessageRequest) returns (stream StreamMessageResponse) {
  }
}

message WriteRequest {
  // The write batch, comprising a list of Update operations
  repeated Update updates = 1;
}

message WriteResponse {
}

message ReadRequest {
  repeated Object objects = 1;
}

message ReadResponse {
  repeated Object objects = 1;
}

message StreamMessageRequest {
}

message StreamMessageResponse {
}

message Update {
  enum Type {
    UNSPECIFIED_TYPE = 0;
    INSERT = 1;
    MODIFY = 2;
    DELETE = 3;
  }
  Type type = 2;

  Object object = 3;
}

message Object {
  string id = 1;

  enum Type {
    UNSPECIFIED_TYPE = 0;
    ENTITY = 1;
    RELATIONSHIP = 2;
  }
  Type type = 2;

  oneof obj {
    Entity entity = 3;
    Relationship relationship = 4;
  }
}

// Entity represents any "thing" that is represented in the topology
message Entity {
  enum Type {
    RIC = 0;
    E2NODE = 1;
    E2INTERFACE = 2;
    XNINTERFACE = 3;
  }
  Type type = 1;

  oneof entity {
    Ric ric = 2;
    E2Node  e2_node = 3;
    E2Interface e2_interface = 4;
    XnInterface xn_interface = 5;
  }

  message Ric {
  }

  message E2Node {
  }

  message E2Interface {
  }

  message XnInterface {
  }
}

message Relationship {
  enum Directionality {
    UNSPECIFIED_DIRECTIONALITY = 0;
    DIRECTED = 1;
    BIDIRECTIONAL = 2;
  }
  Directionality directionality = 1;

  enum Multiplicity {
    UNSPECIFIED_MULTIPLICITY = 0;
    ONE_TO_ONE = 1;
    ONE_TO_MANY = 2;
    MANY_TO_ONE = 3;
    MANY_TO_MANY = 4;
  }
  Multiplicity multiplicity = 2;

  enum Type {
    CONTAINS = 0;
    CONTROLS = 1;
    AGGREGATES = 2;
    ORIGINATES = 3;
    TERMINATES = 4;
    TRAVERSES = 5;
    REALIZED_BY = 6;
  }
  Type type = 3;

  // The two sets of objects that the relationship binds
  repeated Object source_object = 4;
  repeated Object target_object = 5;
}
