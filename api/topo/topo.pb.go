// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/topo/topo.proto

// Package topo defines interfaces for managing network top

package topo

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Update_Type int32

const (
	Update_UNSPECIFIED_TYPE Update_Type = 0
	Update_INSERT           Update_Type = 1
	Update_MODIFY           Update_Type = 2
	Update_DELETE           Update_Type = 3
)

var Update_Type_name = map[int32]string{
	0: "UNSPECIFIED_TYPE",
	1: "INSERT",
	2: "MODIFY",
	3: "DELETE",
}

var Update_Type_value = map[string]int32{
	"UNSPECIFIED_TYPE": 0,
	"INSERT":           1,
	"MODIFY":           2,
	"DELETE":           3,
}

func (x Update_Type) String() string {
	return proto.EnumName(Update_Type_name, int32(x))
}

func (Update_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5823f9f54b50fd8c, []int{6, 0}
}

type Object_Type int32

const (
	Object_UNSPECIFIED_TYPE Object_Type = 0
	Object_ENTITY           Object_Type = 1
	Object_RELATIONSHIP     Object_Type = 2
)

var Object_Type_name = map[int32]string{
	0: "UNSPECIFIED_TYPE",
	1: "ENTITY",
	2: "RELATIONSHIP",
}

var Object_Type_value = map[string]int32{
	"UNSPECIFIED_TYPE": 0,
	"ENTITY":           1,
	"RELATIONSHIP":     2,
}

func (x Object_Type) String() string {
	return proto.EnumName(Object_Type_name, int32(x))
}

func (Object_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5823f9f54b50fd8c, []int{7, 0}
}

type Entity_Type int32

const (
	Entity_RIC         Entity_Type = 0
	Entity_E2NODE      Entity_Type = 1
	Entity_E2INTERFACE Entity_Type = 2
	Entity_XNINTERFACE Entity_Type = 3
)

var Entity_Type_name = map[int32]string{
	0: "RIC",
	1: "E2NODE",
	2: "E2INTERFACE",
	3: "XNINTERFACE",
}

var Entity_Type_value = map[string]int32{
	"RIC":         0,
	"E2NODE":      1,
	"E2INTERFACE": 2,
	"XNINTERFACE": 3,
}

func (x Entity_Type) String() string {
	return proto.EnumName(Entity_Type_name, int32(x))
}

func (Entity_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5823f9f54b50fd8c, []int{8, 0}
}

type Relationship_Directionality int32

const (
	Relationship_UNSPECIFIED_DIRECTIONALITY Relationship_Directionality = 0
	Relationship_DIRECTED                   Relationship_Directionality = 1
	Relationship_BIDIRECTIONAL              Relationship_Directionality = 2
)

var Relationship_Directionality_name = map[int32]string{
	0: "UNSPECIFIED_DIRECTIONALITY",
	1: "DIRECTED",
	2: "BIDIRECTIONAL",
}

var Relationship_Directionality_value = map[string]int32{
	"UNSPECIFIED_DIRECTIONALITY": 0,
	"DIRECTED":                   1,
	"BIDIRECTIONAL":              2,
}

func (x Relationship_Directionality) String() string {
	return proto.EnumName(Relationship_Directionality_name, int32(x))
}

func (Relationship_Directionality) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5823f9f54b50fd8c, []int{9, 0}
}

type Relationship_Multiplicity int32

const (
	Relationship_UNSPECIFIED_MULTIPLICITY Relationship_Multiplicity = 0
	Relationship_ONE_TO_ONE               Relationship_Multiplicity = 1
	Relationship_ONE_TO_MANY              Relationship_Multiplicity = 2
	Relationship_MANY_TO_ONE              Relationship_Multiplicity = 3
	Relationship_MANY_TO_MANY             Relationship_Multiplicity = 4
)

var Relationship_Multiplicity_name = map[int32]string{
	0: "UNSPECIFIED_MULTIPLICITY",
	1: "ONE_TO_ONE",
	2: "ONE_TO_MANY",
	3: "MANY_TO_ONE",
	4: "MANY_TO_MANY",
}

var Relationship_Multiplicity_value = map[string]int32{
	"UNSPECIFIED_MULTIPLICITY": 0,
	"ONE_TO_ONE":               1,
	"ONE_TO_MANY":              2,
	"MANY_TO_ONE":              3,
	"MANY_TO_MANY":             4,
}

func (x Relationship_Multiplicity) String() string {
	return proto.EnumName(Relationship_Multiplicity_name, int32(x))
}

func (Relationship_Multiplicity) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5823f9f54b50fd8c, []int{9, 1}
}

type Relationship_Type int32

const (
	Relationship_CONTAINS    Relationship_Type = 0
	Relationship_CONTROLS    Relationship_Type = 1
	Relationship_AGGREGATES  Relationship_Type = 2
	Relationship_ORIGINATES  Relationship_Type = 3
	Relationship_TERMINATES  Relationship_Type = 4
	Relationship_TRAVERSES   Relationship_Type = 5
	Relationship_REALIZED_BY Relationship_Type = 6
)

var Relationship_Type_name = map[int32]string{
	0: "CONTAINS",
	1: "CONTROLS",
	2: "AGGREGATES",
	3: "ORIGINATES",
	4: "TERMINATES",
	5: "TRAVERSES",
	6: "REALIZED_BY",
}

var Relationship_Type_value = map[string]int32{
	"CONTAINS":    0,
	"CONTROLS":    1,
	"AGGREGATES":  2,
	"ORIGINATES":  3,
	"TERMINATES":  4,
	"TRAVERSES":   5,
	"REALIZED_BY": 6,
}

func (x Relationship_Type) String() string {
	return proto.EnumName(Relationship_Type_name, int32(x))
}

func (Relationship_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5823f9f54b50fd8c, []int{9, 2}
}

type WriteRequest struct {
	// The write batch, comprising a list of Update operations
	Updates []*Update `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty"`
}

func (m *WriteRequest) Reset()         { *m = WriteRequest{} }
func (m *WriteRequest) String() string { return proto.CompactTextString(m) }
func (*WriteRequest) ProtoMessage()    {}
func (*WriteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5823f9f54b50fd8c, []int{0}
}
func (m *WriteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WriteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WriteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WriteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteRequest.Merge(m, src)
}
func (m *WriteRequest) XXX_Size() int {
	return m.Size()
}
func (m *WriteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WriteRequest proto.InternalMessageInfo

func (m *WriteRequest) GetUpdates() []*Update {
	if m != nil {
		return m.Updates
	}
	return nil
}

type WriteResponse struct {
}

func (m *WriteResponse) Reset()         { *m = WriteResponse{} }
func (m *WriteResponse) String() string { return proto.CompactTextString(m) }
func (*WriteResponse) ProtoMessage()    {}
func (*WriteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5823f9f54b50fd8c, []int{1}
}
func (m *WriteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WriteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WriteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WriteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteResponse.Merge(m, src)
}
func (m *WriteResponse) XXX_Size() int {
	return m.Size()
}
func (m *WriteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WriteResponse proto.InternalMessageInfo

type ReadRequest struct {
	Objects []*Object `protobuf:"bytes,1,rep,name=objects,proto3" json:"objects,omitempty"`
}

func (m *ReadRequest) Reset()         { *m = ReadRequest{} }
func (m *ReadRequest) String() string { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()    {}
func (*ReadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5823f9f54b50fd8c, []int{2}
}
func (m *ReadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadRequest.Merge(m, src)
}
func (m *ReadRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadRequest proto.InternalMessageInfo

func (m *ReadRequest) GetObjects() []*Object {
	if m != nil {
		return m.Objects
	}
	return nil
}

type ReadResponse struct {
	Objects []*Object `protobuf:"bytes,1,rep,name=objects,proto3" json:"objects,omitempty"`
}

func (m *ReadResponse) Reset()         { *m = ReadResponse{} }
func (m *ReadResponse) String() string { return proto.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()    {}
func (*ReadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5823f9f54b50fd8c, []int{3}
}
func (m *ReadResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReadResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadResponse.Merge(m, src)
}
func (m *ReadResponse) XXX_Size() int {
	return m.Size()
}
func (m *ReadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReadResponse proto.InternalMessageInfo

func (m *ReadResponse) GetObjects() []*Object {
	if m != nil {
		return m.Objects
	}
	return nil
}

type StreamMessageRequest struct {
}

func (m *StreamMessageRequest) Reset()         { *m = StreamMessageRequest{} }
func (m *StreamMessageRequest) String() string { return proto.CompactTextString(m) }
func (*StreamMessageRequest) ProtoMessage()    {}
func (*StreamMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5823f9f54b50fd8c, []int{4}
}
func (m *StreamMessageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamMessageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamMessageRequest.Merge(m, src)
}
func (m *StreamMessageRequest) XXX_Size() int {
	return m.Size()
}
func (m *StreamMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamMessageRequest proto.InternalMessageInfo

type StreamMessageResponse struct {
}

func (m *StreamMessageResponse) Reset()         { *m = StreamMessageResponse{} }
func (m *StreamMessageResponse) String() string { return proto.CompactTextString(m) }
func (*StreamMessageResponse) ProtoMessage()    {}
func (*StreamMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5823f9f54b50fd8c, []int{5}
}
func (m *StreamMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamMessageResponse.Merge(m, src)
}
func (m *StreamMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *StreamMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamMessageResponse proto.InternalMessageInfo

type Update struct {
	Type   Update_Type `protobuf:"varint,2,opt,name=type,proto3,enum=topo.Update_Type" json:"type,omitempty"`
	Object *Object     `protobuf:"bytes,3,opt,name=object,proto3" json:"object,omitempty"`
}

func (m *Update) Reset()         { *m = Update{} }
func (m *Update) String() string { return proto.CompactTextString(m) }
func (*Update) ProtoMessage()    {}
func (*Update) Descriptor() ([]byte, []int) {
	return fileDescriptor_5823f9f54b50fd8c, []int{6}
}
func (m *Update) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Update) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Update.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Update) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Update.Merge(m, src)
}
func (m *Update) XXX_Size() int {
	return m.Size()
}
func (m *Update) XXX_DiscardUnknown() {
	xxx_messageInfo_Update.DiscardUnknown(m)
}

var xxx_messageInfo_Update proto.InternalMessageInfo

func (m *Update) GetType() Update_Type {
	if m != nil {
		return m.Type
	}
	return Update_UNSPECIFIED_TYPE
}

func (m *Update) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

type Object struct {
	Id   string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type Object_Type `protobuf:"varint,2,opt,name=type,proto3,enum=topo.Object_Type" json:"type,omitempty"`
	// Types that are valid to be assigned to Obj:
	//	*Object_Entity
	//	*Object_Relationship
	Obj isObject_Obj `protobuf_oneof:"obj"`
}

func (m *Object) Reset()         { *m = Object{} }
func (m *Object) String() string { return proto.CompactTextString(m) }
func (*Object) ProtoMessage()    {}
func (*Object) Descriptor() ([]byte, []int) {
	return fileDescriptor_5823f9f54b50fd8c, []int{7}
}
func (m *Object) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Object) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Object.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Object) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Object.Merge(m, src)
}
func (m *Object) XXX_Size() int {
	return m.Size()
}
func (m *Object) XXX_DiscardUnknown() {
	xxx_messageInfo_Object.DiscardUnknown(m)
}

var xxx_messageInfo_Object proto.InternalMessageInfo

type isObject_Obj interface {
	isObject_Obj()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Object_Entity struct {
	Entity *Entity `protobuf:"bytes,3,opt,name=entity,proto3,oneof" json:"entity,omitempty"`
}
type Object_Relationship struct {
	Relationship *Relationship `protobuf:"bytes,4,opt,name=relationship,proto3,oneof" json:"relationship,omitempty"`
}

func (*Object_Entity) isObject_Obj()       {}
func (*Object_Relationship) isObject_Obj() {}

func (m *Object) GetObj() isObject_Obj {
	if m != nil {
		return m.Obj
	}
	return nil
}

func (m *Object) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Object) GetType() Object_Type {
	if m != nil {
		return m.Type
	}
	return Object_UNSPECIFIED_TYPE
}

func (m *Object) GetEntity() *Entity {
	if x, ok := m.GetObj().(*Object_Entity); ok {
		return x.Entity
	}
	return nil
}

func (m *Object) GetRelationship() *Relationship {
	if x, ok := m.GetObj().(*Object_Relationship); ok {
		return x.Relationship
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Object) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Object_Entity)(nil),
		(*Object_Relationship)(nil),
	}
}

// Entity represents any "thing" that is represented in the topology
type Entity struct {
	Type Entity_Type `protobuf:"varint,1,opt,name=type,proto3,enum=topo.Entity_Type" json:"type,omitempty"`
	// Types that are valid to be assigned to Entity:
	//	*Entity_Ric_
	//	*Entity_E2Node_
	//	*Entity_E2Interface_
	//	*Entity_XnInterface_
	Entity isEntity_Entity `protobuf_oneof:"entity"`
}

func (m *Entity) Reset()         { *m = Entity{} }
func (m *Entity) String() string { return proto.CompactTextString(m) }
func (*Entity) ProtoMessage()    {}
func (*Entity) Descriptor() ([]byte, []int) {
	return fileDescriptor_5823f9f54b50fd8c, []int{8}
}
func (m *Entity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Entity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Entity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Entity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entity.Merge(m, src)
}
func (m *Entity) XXX_Size() int {
	return m.Size()
}
func (m *Entity) XXX_DiscardUnknown() {
	xxx_messageInfo_Entity.DiscardUnknown(m)
}

var xxx_messageInfo_Entity proto.InternalMessageInfo

type isEntity_Entity interface {
	isEntity_Entity()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Entity_Ric_ struct {
	Ric *Entity_Ric `protobuf:"bytes,2,opt,name=ric,proto3,oneof" json:"ric,omitempty"`
}
type Entity_E2Node_ struct {
	E2Node *Entity_E2Node `protobuf:"bytes,3,opt,name=e2_node,json=e2Node,proto3,oneof" json:"e2_node,omitempty"`
}
type Entity_E2Interface_ struct {
	E2Interface *Entity_E2Interface `protobuf:"bytes,4,opt,name=e2_interface,json=e2Interface,proto3,oneof" json:"e2_interface,omitempty"`
}
type Entity_XnInterface_ struct {
	XnInterface *Entity_XnInterface `protobuf:"bytes,5,opt,name=xn_interface,json=xnInterface,proto3,oneof" json:"xn_interface,omitempty"`
}

func (*Entity_Ric_) isEntity_Entity()         {}
func (*Entity_E2Node_) isEntity_Entity()      {}
func (*Entity_E2Interface_) isEntity_Entity() {}
func (*Entity_XnInterface_) isEntity_Entity() {}

func (m *Entity) GetEntity() isEntity_Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *Entity) GetType() Entity_Type {
	if m != nil {
		return m.Type
	}
	return Entity_RIC
}

func (m *Entity) GetRic() *Entity_Ric {
	if x, ok := m.GetEntity().(*Entity_Ric_); ok {
		return x.Ric
	}
	return nil
}

func (m *Entity) GetE2Node() *Entity_E2Node {
	if x, ok := m.GetEntity().(*Entity_E2Node_); ok {
		return x.E2Node
	}
	return nil
}

func (m *Entity) GetE2Interface() *Entity_E2Interface {
	if x, ok := m.GetEntity().(*Entity_E2Interface_); ok {
		return x.E2Interface
	}
	return nil
}

func (m *Entity) GetXnInterface() *Entity_XnInterface {
	if x, ok := m.GetEntity().(*Entity_XnInterface_); ok {
		return x.XnInterface
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Entity) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Entity_Ric_)(nil),
		(*Entity_E2Node_)(nil),
		(*Entity_E2Interface_)(nil),
		(*Entity_XnInterface_)(nil),
	}
}

type Entity_Ric struct {
}

func (m *Entity_Ric) Reset()         { *m = Entity_Ric{} }
func (m *Entity_Ric) String() string { return proto.CompactTextString(m) }
func (*Entity_Ric) ProtoMessage()    {}
func (*Entity_Ric) Descriptor() ([]byte, []int) {
	return fileDescriptor_5823f9f54b50fd8c, []int{8, 0}
}
func (m *Entity_Ric) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Entity_Ric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Entity_Ric.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Entity_Ric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entity_Ric.Merge(m, src)
}
func (m *Entity_Ric) XXX_Size() int {
	return m.Size()
}
func (m *Entity_Ric) XXX_DiscardUnknown() {
	xxx_messageInfo_Entity_Ric.DiscardUnknown(m)
}

var xxx_messageInfo_Entity_Ric proto.InternalMessageInfo

type Entity_E2Node struct {
}

func (m *Entity_E2Node) Reset()         { *m = Entity_E2Node{} }
func (m *Entity_E2Node) String() string { return proto.CompactTextString(m) }
func (*Entity_E2Node) ProtoMessage()    {}
func (*Entity_E2Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_5823f9f54b50fd8c, []int{8, 1}
}
func (m *Entity_E2Node) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Entity_E2Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Entity_E2Node.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Entity_E2Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entity_E2Node.Merge(m, src)
}
func (m *Entity_E2Node) XXX_Size() int {
	return m.Size()
}
func (m *Entity_E2Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Entity_E2Node.DiscardUnknown(m)
}

var xxx_messageInfo_Entity_E2Node proto.InternalMessageInfo

type Entity_E2Interface struct {
}

func (m *Entity_E2Interface) Reset()         { *m = Entity_E2Interface{} }
func (m *Entity_E2Interface) String() string { return proto.CompactTextString(m) }
func (*Entity_E2Interface) ProtoMessage()    {}
func (*Entity_E2Interface) Descriptor() ([]byte, []int) {
	return fileDescriptor_5823f9f54b50fd8c, []int{8, 2}
}
func (m *Entity_E2Interface) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Entity_E2Interface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Entity_E2Interface.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Entity_E2Interface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entity_E2Interface.Merge(m, src)
}
func (m *Entity_E2Interface) XXX_Size() int {
	return m.Size()
}
func (m *Entity_E2Interface) XXX_DiscardUnknown() {
	xxx_messageInfo_Entity_E2Interface.DiscardUnknown(m)
}

var xxx_messageInfo_Entity_E2Interface proto.InternalMessageInfo

type Entity_XnInterface struct {
}

func (m *Entity_XnInterface) Reset()         { *m = Entity_XnInterface{} }
func (m *Entity_XnInterface) String() string { return proto.CompactTextString(m) }
func (*Entity_XnInterface) ProtoMessage()    {}
func (*Entity_XnInterface) Descriptor() ([]byte, []int) {
	return fileDescriptor_5823f9f54b50fd8c, []int{8, 3}
}
func (m *Entity_XnInterface) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Entity_XnInterface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Entity_XnInterface.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Entity_XnInterface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entity_XnInterface.Merge(m, src)
}
func (m *Entity_XnInterface) XXX_Size() int {
	return m.Size()
}
func (m *Entity_XnInterface) XXX_DiscardUnknown() {
	xxx_messageInfo_Entity_XnInterface.DiscardUnknown(m)
}

var xxx_messageInfo_Entity_XnInterface proto.InternalMessageInfo

type Relationship struct {
	Directionality Relationship_Directionality `protobuf:"varint,1,opt,name=directionality,proto3,enum=topo.Relationship_Directionality" json:"directionality,omitempty"`
	Multiplicity   Relationship_Multiplicity   `protobuf:"varint,2,opt,name=multiplicity,proto3,enum=topo.Relationship_Multiplicity" json:"multiplicity,omitempty"`
	Type           Relationship_Type           `protobuf:"varint,3,opt,name=type,proto3,enum=topo.Relationship_Type" json:"type,omitempty"`
	// The two object(s) that the relationship binds
	SourceObject []*Object `protobuf:"bytes,4,rep,name=source_object,json=sourceObject,proto3" json:"source_object,omitempty"`
	TargetObject []*Object `protobuf:"bytes,5,rep,name=target_object,json=targetObject,proto3" json:"target_object,omitempty"`
}

func (m *Relationship) Reset()         { *m = Relationship{} }
func (m *Relationship) String() string { return proto.CompactTextString(m) }
func (*Relationship) ProtoMessage()    {}
func (*Relationship) Descriptor() ([]byte, []int) {
	return fileDescriptor_5823f9f54b50fd8c, []int{9}
}
func (m *Relationship) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Relationship) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Relationship.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Relationship) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Relationship.Merge(m, src)
}
func (m *Relationship) XXX_Size() int {
	return m.Size()
}
func (m *Relationship) XXX_DiscardUnknown() {
	xxx_messageInfo_Relationship.DiscardUnknown(m)
}

var xxx_messageInfo_Relationship proto.InternalMessageInfo

func (m *Relationship) GetDirectionality() Relationship_Directionality {
	if m != nil {
		return m.Directionality
	}
	return Relationship_UNSPECIFIED_DIRECTIONALITY
}

func (m *Relationship) GetMultiplicity() Relationship_Multiplicity {
	if m != nil {
		return m.Multiplicity
	}
	return Relationship_UNSPECIFIED_MULTIPLICITY
}

func (m *Relationship) GetType() Relationship_Type {
	if m != nil {
		return m.Type
	}
	return Relationship_CONTAINS
}

func (m *Relationship) GetSourceObject() []*Object {
	if m != nil {
		return m.SourceObject
	}
	return nil
}

func (m *Relationship) GetTargetObject() []*Object {
	if m != nil {
		return m.TargetObject
	}
	return nil
}

func init() {
	proto.RegisterEnum("topo.Update_Type", Update_Type_name, Update_Type_value)
	proto.RegisterEnum("topo.Object_Type", Object_Type_name, Object_Type_value)
	proto.RegisterEnum("topo.Entity_Type", Entity_Type_name, Entity_Type_value)
	proto.RegisterEnum("topo.Relationship_Directionality", Relationship_Directionality_name, Relationship_Directionality_value)
	proto.RegisterEnum("topo.Relationship_Multiplicity", Relationship_Multiplicity_name, Relationship_Multiplicity_value)
	proto.RegisterEnum("topo.Relationship_Type", Relationship_Type_name, Relationship_Type_value)
	proto.RegisterType((*WriteRequest)(nil), "topo.WriteRequest")
	proto.RegisterType((*WriteResponse)(nil), "topo.WriteResponse")
	proto.RegisterType((*ReadRequest)(nil), "topo.ReadRequest")
	proto.RegisterType((*ReadResponse)(nil), "topo.ReadResponse")
	proto.RegisterType((*StreamMessageRequest)(nil), "topo.StreamMessageRequest")
	proto.RegisterType((*StreamMessageResponse)(nil), "topo.StreamMessageResponse")
	proto.RegisterType((*Update)(nil), "topo.Update")
	proto.RegisterType((*Object)(nil), "topo.Object")
	proto.RegisterType((*Entity)(nil), "topo.Entity")
	proto.RegisterType((*Entity_Ric)(nil), "topo.Entity.Ric")
	proto.RegisterType((*Entity_E2Node)(nil), "topo.Entity.E2Node")
	proto.RegisterType((*Entity_E2Interface)(nil), "topo.Entity.E2Interface")
	proto.RegisterType((*Entity_XnInterface)(nil), "topo.Entity.XnInterface")
	proto.RegisterType((*Relationship)(nil), "topo.Relationship")
}

func init() { proto.RegisterFile("api/topo/topo.proto", fileDescriptor_5823f9f54b50fd8c) }

var fileDescriptor_5823f9f54b50fd8c = []byte{
	// 897 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x41, 0x8f, 0xdb, 0x44,
	0x14, 0xf6, 0xc4, 0x49, 0xba, 0x7d, 0x71, 0x52, 0xef, 0x6c, 0xa1, 0x51, 0x40, 0x61, 0xb1, 0xa0,
	0x5a, 0x09, 0x29, 0xa5, 0x41, 0x20, 0x84, 0x54, 0x09, 0x27, 0x99, 0xdd, 0x8c, 0x94, 0xd8, 0xcb,
	0xd8, 0x0b, 0x0d, 0x97, 0xc8, 0x9b, 0x0c, 0xad, 0xab, 0xd4, 0x36, 0x8e, 0x57, 0xea, 0xfe, 0x0b,
	0x6e, 0xfc, 0x18, 0xfe, 0x00, 0xc7, 0x1e, 0x39, 0xa2, 0x5d, 0x4e, 0xfc, 0x05, 0x2e, 0x68, 0x66,
	0xec, 0x5d, 0x7b, 0x1b, 0x09, 0x2e, 0xd6, 0xbc, 0xf7, 0xbe, 0xef, 0xcd, 0x7b, 0x33, 0x9f, 0xe7,
	0xc1, 0x41, 0x90, 0x84, 0x4f, 0xb2, 0x38, 0x89, 0xe5, 0x67, 0x90, 0xa4, 0x71, 0x16, 0xe3, 0xba,
	0x58, 0x5b, 0x5f, 0x81, 0xf1, 0x43, 0x1a, 0x66, 0x9c, 0xf1, 0x9f, 0x2f, 0xf8, 0x36, 0xc3, 0x8f,
	0xe1, 0xde, 0x45, 0xb2, 0x0e, 0x32, 0xbe, 0xed, 0xa2, 0x43, 0xfd, 0xa8, 0x35, 0x34, 0x06, 0x92,
	0x73, 0x26, 0x9d, 0xac, 0x08, 0x5a, 0x0f, 0xa0, 0x9d, 0xf3, 0xb6, 0x49, 0x1c, 0x6d, 0xb9, 0xf5,
	0x25, 0xb4, 0x18, 0x0f, 0xd6, 0xa5, 0x3c, 0xf1, 0xf9, 0x2b, 0xbe, 0xca, 0xee, 0xe4, 0x71, 0xa5,
	0x93, 0x15, 0x41, 0xb1, 0xbf, 0xa2, 0xa9, 0x34, 0xff, 0x9b, 0xf7, 0x3e, 0x3c, 0xf4, 0xb2, 0x94,
	0x07, 0xaf, 0xe7, 0x7c, 0xbb, 0x0d, 0x5e, 0x14, 0xf5, 0x5b, 0x8f, 0xe0, 0xbd, 0x3b, 0xfe, 0xbc,
	0xbe, 0x5f, 0x11, 0x34, 0x55, 0x13, 0xf8, 0x53, 0xa8, 0x67, 0x97, 0x09, 0xef, 0xd6, 0x0e, 0xd1,
	0x51, 0x67, 0xb8, 0x5f, 0x6e, 0x70, 0xe0, 0x5f, 0x26, 0x9c, 0xc9, 0x30, 0xfe, 0x04, 0x9a, 0x6a,
	0xb7, 0xae, 0x7e, 0x88, 0xde, 0xa9, 0x24, 0x8f, 0x59, 0xdf, 0x42, 0x5d, 0x70, 0xf0, 0x43, 0x30,
	0xcf, 0x1c, 0xef, 0x94, 0x8c, 0xe9, 0x31, 0x25, 0x93, 0xa5, 0xbf, 0x38, 0x25, 0xa6, 0x86, 0x01,
	0x9a, 0xd4, 0xf1, 0x08, 0xf3, 0x4d, 0x24, 0xd6, 0x73, 0x77, 0x42, 0x8f, 0x17, 0x66, 0x4d, 0xac,
	0x27, 0x64, 0x46, 0x7c, 0x62, 0xea, 0xd6, 0x5f, 0x08, 0x9a, 0x2a, 0x29, 0xee, 0x40, 0x2d, 0x5c,
	0x77, 0xd1, 0x21, 0x3a, 0xba, 0xcf, 0x6a, 0xe1, 0x7a, 0x77, 0xa5, 0x0a, 0x5b, 0xae, 0xf4, 0x31,
	0x34, 0x79, 0x94, 0x85, 0xd9, 0x65, 0xb5, 0x52, 0x22, 0x7d, 0x53, 0x8d, 0xe5, 0x51, 0xfc, 0x35,
	0x18, 0x29, 0xdf, 0x04, 0x59, 0x18, 0x47, 0xdb, 0x97, 0x61, 0xd2, 0xad, 0x4b, 0x34, 0x56, 0x68,
	0x56, 0x8a, 0x4c, 0x35, 0x56, 0x41, 0x5a, 0xdf, 0xfc, 0x57, 0x97, 0xc4, 0xf1, 0xa9, 0xbf, 0x30,
	0x11, 0x36, 0xc1, 0x60, 0x64, 0x66, 0xfb, 0xd4, 0x75, 0xbc, 0x29, 0x3d, 0x35, 0x6b, 0xa3, 0x06,
	0xe8, 0xf1, 0xf9, 0x2b, 0xeb, 0x9f, 0x1a, 0x34, 0x55, 0x45, 0x37, 0x6d, 0xa1, 0x72, 0x5b, 0x2a,
	0x56, 0xbd, 0x00, 0x3d, 0x0d, 0x57, 0xb2, 0xf9, 0xd6, 0xd0, 0xac, 0xa0, 0x58, 0xb8, 0x9a, 0x6a,
	0x4c, 0x84, 0xf1, 0x00, 0xee, 0xf1, 0xe1, 0x32, 0x8a, 0xd7, 0x3c, 0xef, 0xfe, 0xa0, 0x82, 0x24,
	0x43, 0x27, 0x5e, 0x73, 0x79, 0x08, 0x72, 0x85, 0x9f, 0x81, 0xc1, 0x87, 0xcb, 0x30, 0xca, 0x78,
	0xfa, 0x53, 0xb0, 0xe2, 0xf9, 0x21, 0x74, 0xef, 0x90, 0x68, 0x11, 0x9f, 0x6a, 0xac, 0xc5, 0x6f,
	0x4d, 0x41, 0x7f, 0x13, 0x95, 0xe8, 0x8d, 0x1d, 0xf4, 0xe7, 0x51, 0x85, 0xfe, 0xe6, 0xd6, 0xec,
	0x35, 0x40, 0x67, 0xe1, 0xaa, 0xb7, 0x07, 0x4d, 0x55, 0x58, 0xaf, 0x0d, 0xad, 0xd2, 0x6e, 0xc2,
	0x2c, 0xb1, 0xad, 0x67, 0xf9, 0xb9, 0xdf, 0x03, 0x9d, 0xd1, 0x71, 0x7e, 0xd4, 0x43, 0xc7, 0x9d,
	0x10, 0x13, 0xe1, 0x07, 0x92, 0xea, 0xf8, 0x84, 0x1d, 0xdb, 0x63, 0x62, 0xd6, 0x84, 0xe3, 0xb9,
	0x73, 0xeb, 0xd0, 0x47, 0x7b, 0x85, 0x30, 0xac, 0xbf, 0xeb, 0xe2, 0x47, 0xbb, 0xbd, 0x51, 0x4c,
	0xa1, 0xb3, 0x0e, 0x53, 0xbe, 0x12, 0x8e, 0x60, 0x23, 0xb4, 0xa3, 0x6e, 0xe3, 0xe3, 0x77, 0xd5,
	0x30, 0x98, 0x54, 0x80, 0xec, 0x0e, 0x11, 0x8f, 0xc1, 0x78, 0x7d, 0xb1, 0xc9, 0xc2, 0x64, 0x13,
	0xae, 0x44, 0x22, 0xa5, 0xd6, 0x8f, 0x76, 0x24, 0x9a, 0x97, 0x60, 0xac, 0x42, 0xc2, 0x9f, 0xe5,
	0x9a, 0xd0, 0x25, 0xf9, 0xd1, 0x0e, 0x72, 0x49, 0x19, 0x4f, 0xa1, 0xbd, 0x8d, 0x2f, 0xd2, 0x15,
	0x5f, 0xe6, 0x7f, 0x68, 0x7d, 0xc7, 0x5b, 0x61, 0x28, 0x48, 0xfe, 0x6b, 0x3d, 0x85, 0x76, 0x16,
	0xa4, 0x2f, 0x78, 0x56, 0x50, 0x1a, 0xbb, 0x28, 0x0a, 0xa2, 0x2c, 0xeb, 0x3b, 0xe8, 0x54, 0x3b,
	0xc7, 0x7d, 0xe8, 0x95, 0xe5, 0x3f, 0xa1, 0x8c, 0x8c, 0x85, 0xd2, 0xed, 0x99, 0x10, 0xbf, 0x86,
	0x0d, 0xd8, 0x53, 0x3e, 0x32, 0x31, 0x11, 0xde, 0x87, 0xf6, 0x88, 0x96, 0x30, 0x66, 0xcd, 0x4a,
	0xc0, 0x28, 0x9f, 0x01, 0xfe, 0x10, 0xba, 0xe5, 0x84, 0xf3, 0xb3, 0x99, 0x4f, 0x4f, 0x67, 0x74,
	0xac, 0xd2, 0x75, 0x00, 0x5c, 0x87, 0x2c, 0x7d, 0x77, 0xe9, 0x3a, 0xf9, 0x85, 0xe7, 0xf6, 0xdc,
	0x76, 0x16, 0xea, 0xc2, 0xc5, 0xaa, 0x40, 0xe8, 0xe2, 0xef, 0x2b, 0x1c, 0x12, 0x52, 0xb7, 0xd2,
	0x5c, 0x41, 0x06, 0xec, 0x8d, 0x5d, 0xc7, 0xb7, 0xa9, 0xe3, 0xa9, 0x42, 0x85, 0xc5, 0xdc, 0x99,
	0x67, 0x22, 0xb1, 0x8f, 0x7d, 0x72, 0xc2, 0xc8, 0x89, 0xed, 0x13, 0xcf, 0xac, 0xc9, 0x7d, 0x19,
	0x3d, 0xa1, 0x8e, 0xb4, 0x75, 0x61, 0xfb, 0x84, 0xcd, 0x73, 0xbb, 0x8e, 0xdb, 0x70, 0xdf, 0x67,
	0xf6, 0xf7, 0x84, 0x79, 0xc4, 0x33, 0x1b, 0xa2, 0x0a, 0x46, 0xec, 0x19, 0xfd, 0x91, 0x4c, 0x96,
	0xa3, 0x85, 0xd9, 0x1c, 0xfe, 0x86, 0x40, 0x4e, 0x17, 0x3c, 0x84, 0x86, 0x9c, 0x12, 0x38, 0x7f,
	0x63, 0xca, 0xa3, 0xa6, 0x77, 0x50, 0xf1, 0xe5, 0xcf, 0xb4, 0x86, 0x9f, 0x40, 0x5d, 0x4c, 0x04,
	0xbc, 0x5f, 0x48, 0xe0, 0x66, 0xa8, 0xf4, 0x70, 0xd9, 0x75, 0x43, 0x70, 0xa0, 0xad, 0x9e, 0xfc,
	0xf1, 0xcb, 0x20, 0x8a, 0xf8, 0x06, 0xf7, 0x14, 0x6c, 0xd7, 0x7c, 0xe8, 0x7d, 0xb0, 0x33, 0x56,
	0xe4, 0x3a, 0x42, 0x9f, 0xa3, 0x51, 0xf7, 0xf7, 0xab, 0x3e, 0x7a, 0x7b, 0xd5, 0x47, 0x7f, 0x5e,
	0xf5, 0xd1, 0x2f, 0xd7, 0x7d, 0xed, 0xed, 0x75, 0x5f, 0xfb, 0xe3, 0xba, 0xaf, 0x9d, 0x37, 0xe5,
	0xe4, 0xfc, 0xe2, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc6, 0xb7, 0x5e, 0x82, 0x50, 0x07, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TopoClient is the client API for Topo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TopoClient interface {
	// Update one or more entities to the topology
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error)
	// Read one or more entities from topology
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
	// Represents the bidirectional stream between
	// onos-topo and a client for the purpose of
	// - streaming notifications
	StreamChannel(ctx context.Context, opts ...grpc.CallOption) (Topo_StreamChannelClient, error)
}

type topoClient struct {
	cc *grpc.ClientConn
}

func NewTopoClient(cc *grpc.ClientConn) TopoClient {
	return &topoClient{cc}
}

func (c *topoClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, "/topo.topo/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topoClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := c.cc.Invoke(ctx, "/topo.topo/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topoClient) StreamChannel(ctx context.Context, opts ...grpc.CallOption) (Topo_StreamChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Topo_serviceDesc.Streams[0], "/topo.topo/StreamChannel", opts...)
	if err != nil {
		return nil, err
	}
	x := &topoStreamChannelClient{stream}
	return x, nil
}

type Topo_StreamChannelClient interface {
	Send(*StreamMessageRequest) error
	Recv() (*StreamMessageResponse, error)
	grpc.ClientStream
}

type topoStreamChannelClient struct {
	grpc.ClientStream
}

func (x *topoStreamChannelClient) Send(m *StreamMessageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *topoStreamChannelClient) Recv() (*StreamMessageResponse, error) {
	m := new(StreamMessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TopoServer is the server API for Topo service.
type TopoServer interface {
	// Update one or more entities to the topology
	Write(context.Context, *WriteRequest) (*WriteResponse, error)
	// Read one or more entities from topology
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
	// Represents the bidirectional stream between
	// onos-topo and a client for the purpose of
	// - streaming notifications
	StreamChannel(Topo_StreamChannelServer) error
}

// UnimplementedTopoServer can be embedded to have forward compatible implementations.
type UnimplementedTopoServer struct {
}

func (*UnimplementedTopoServer) Write(ctx context.Context, req *WriteRequest) (*WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (*UnimplementedTopoServer) Read(ctx context.Context, req *ReadRequest) (*ReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedTopoServer) StreamChannel(srv Topo_StreamChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamChannel not implemented")
}

func RegisterTopoServer(s *grpc.Server, srv TopoServer) {
	s.RegisterService(&_Topo_serviceDesc, srv)
}

func _Topo_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopoServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/topo.topo/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopoServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Topo_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopoServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/topo.topo/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopoServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Topo_StreamChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TopoServer).StreamChannel(&topoStreamChannelServer{stream})
}

type Topo_StreamChannelServer interface {
	Send(*StreamMessageResponse) error
	Recv() (*StreamMessageRequest, error)
	grpc.ServerStream
}

type topoStreamChannelServer struct {
	grpc.ServerStream
}

func (x *topoStreamChannelServer) Send(m *StreamMessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *topoStreamChannelServer) Recv() (*StreamMessageRequest, error) {
	m := new(StreamMessageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Topo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "topo.topo",
	HandlerType: (*TopoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Write",
			Handler:    _Topo_Write_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Topo_Read_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamChannel",
			Handler:       _Topo_StreamChannel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/topo/topo.proto",
}

func (m *WriteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WriteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WriteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Updates) > 0 {
		for iNdEx := len(m.Updates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Updates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTopo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WriteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WriteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WriteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ReadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Objects) > 0 {
		for iNdEx := len(m.Objects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Objects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTopo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReadResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Objects) > 0 {
		for iNdEx := len(m.Objects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Objects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTopo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StreamMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamMessageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StreamMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Update) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Update) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Update) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Object != nil {
		{
			size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTopo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintTopo(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *Object) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Object) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Object) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Obj != nil {
		{
			size := m.Obj.Size()
			i -= size
			if _, err := m.Obj.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Type != 0 {
		i = encodeVarintTopo(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTopo(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Object_Entity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Object_Entity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Entity != nil {
		{
			size, err := m.Entity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTopo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Object_Relationship) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Object_Relationship) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Relationship != nil {
		{
			size, err := m.Relationship.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTopo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Entity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Entity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Entity != nil {
		{
			size := m.Entity.Size()
			i -= size
			if _, err := m.Entity.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Type != 0 {
		i = encodeVarintTopo(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Entity_Ric_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Entity_Ric_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Ric != nil {
		{
			size, err := m.Ric.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTopo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Entity_E2Node_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Entity_E2Node_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.E2Node != nil {
		{
			size, err := m.E2Node.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTopo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Entity_E2Interface_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Entity_E2Interface_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.E2Interface != nil {
		{
			size, err := m.E2Interface.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTopo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Entity_XnInterface_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Entity_XnInterface_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.XnInterface != nil {
		{
			size, err := m.XnInterface.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTopo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Entity_Ric) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entity_Ric) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Entity_Ric) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Entity_E2Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entity_E2Node) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Entity_E2Node) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Entity_E2Interface) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entity_E2Interface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Entity_E2Interface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Entity_XnInterface) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entity_XnInterface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Entity_XnInterface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Relationship) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Relationship) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Relationship) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TargetObject) > 0 {
		for iNdEx := len(m.TargetObject) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TargetObject[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTopo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.SourceObject) > 0 {
		for iNdEx := len(m.SourceObject) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SourceObject[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTopo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Type != 0 {
		i = encodeVarintTopo(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.Multiplicity != 0 {
		i = encodeVarintTopo(dAtA, i, uint64(m.Multiplicity))
		i--
		dAtA[i] = 0x10
	}
	if m.Directionality != 0 {
		i = encodeVarintTopo(dAtA, i, uint64(m.Directionality))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTopo(dAtA []byte, offset int, v uint64) int {
	offset -= sovTopo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WriteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Updates) > 0 {
		for _, e := range m.Updates {
			l = e.Size()
			n += 1 + l + sovTopo(uint64(l))
		}
	}
	return n
}

func (m *WriteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ReadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Objects) > 0 {
		for _, e := range m.Objects {
			l = e.Size()
			n += 1 + l + sovTopo(uint64(l))
		}
	}
	return n
}

func (m *ReadResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Objects) > 0 {
		for _, e := range m.Objects {
			l = e.Size()
			n += 1 + l + sovTopo(uint64(l))
		}
	}
	return n
}

func (m *StreamMessageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StreamMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Update) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTopo(uint64(m.Type))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovTopo(uint64(l))
	}
	return n
}

func (m *Object) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTopo(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovTopo(uint64(m.Type))
	}
	if m.Obj != nil {
		n += m.Obj.Size()
	}
	return n
}

func (m *Object_Entity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Entity != nil {
		l = m.Entity.Size()
		n += 1 + l + sovTopo(uint64(l))
	}
	return n
}
func (m *Object_Relationship) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Relationship != nil {
		l = m.Relationship.Size()
		n += 1 + l + sovTopo(uint64(l))
	}
	return n
}
func (m *Entity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTopo(uint64(m.Type))
	}
	if m.Entity != nil {
		n += m.Entity.Size()
	}
	return n
}

func (m *Entity_Ric_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ric != nil {
		l = m.Ric.Size()
		n += 1 + l + sovTopo(uint64(l))
	}
	return n
}
func (m *Entity_E2Node_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.E2Node != nil {
		l = m.E2Node.Size()
		n += 1 + l + sovTopo(uint64(l))
	}
	return n
}
func (m *Entity_E2Interface_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.E2Interface != nil {
		l = m.E2Interface.Size()
		n += 1 + l + sovTopo(uint64(l))
	}
	return n
}
func (m *Entity_XnInterface_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XnInterface != nil {
		l = m.XnInterface.Size()
		n += 1 + l + sovTopo(uint64(l))
	}
	return n
}
func (m *Entity_Ric) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Entity_E2Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Entity_E2Interface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Entity_XnInterface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Relationship) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Directionality != 0 {
		n += 1 + sovTopo(uint64(m.Directionality))
	}
	if m.Multiplicity != 0 {
		n += 1 + sovTopo(uint64(m.Multiplicity))
	}
	if m.Type != 0 {
		n += 1 + sovTopo(uint64(m.Type))
	}
	if len(m.SourceObject) > 0 {
		for _, e := range m.SourceObject {
			l = e.Size()
			n += 1 + l + sovTopo(uint64(l))
		}
	}
	if len(m.TargetObject) > 0 {
		for _, e := range m.TargetObject {
			l = e.Size()
			n += 1 + l + sovTopo(uint64(l))
		}
	}
	return n
}

func sovTopo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTopo(x uint64) (n int) {
	return sovTopo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WriteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WriteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WriteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTopo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updates = append(m.Updates, &Update{})
			if err := m.Updates[len(m.Updates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTopo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WriteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WriteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WriteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTopo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTopo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Objects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTopo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Objects = append(m.Objects, &Object{})
			if err := m.Objects[len(m.Objects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTopo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Objects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTopo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Objects = append(m.Objects, &Object{})
			if err := m.Objects[len(m.Objects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTopo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTopo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTopo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTopo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTopo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Update) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Update: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Update: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Update_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTopo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Object{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTopo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Object) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Object: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Object: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTopo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Object_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTopo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Entity{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Obj = &Object_Entity{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relationship", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTopo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Relationship{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Obj = &Object_Relationship{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTopo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Entity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Entity_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ric", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTopo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Entity_Ric{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Entity = &Entity_Ric_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field E2Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTopo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Entity_E2Node{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Entity = &Entity_E2Node_{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field E2Interface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTopo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Entity_E2Interface{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Entity = &Entity_E2Interface_{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XnInterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTopo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Entity_XnInterface{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Entity = &Entity_XnInterface_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTopo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Entity_Ric) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ric: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ric: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTopo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTopo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Entity_E2Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTopo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTopo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Entity_E2Interface) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2Interface: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2Interface: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTopo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTopo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Entity_XnInterface) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XnInterface: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XnInterface: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTopo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTopo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Relationship) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Relationship: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Relationship: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Directionality", wireType)
			}
			m.Directionality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Directionality |= Relationship_Directionality(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multiplicity", wireType)
			}
			m.Multiplicity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Multiplicity |= Relationship_Multiplicity(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Relationship_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceObject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTopo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceObject = append(m.SourceObject, &Object{})
			if err := m.SourceObject[len(m.SourceObject)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetObject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTopo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetObject = append(m.TargetObject, &Object{})
			if err := m.TargetObject[len(m.TargetObject)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTopo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTopo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTopo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTopo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTopo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTopo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTopo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTopo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTopo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTopo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTopo = fmt.Errorf("proto: unexpected end of group")
)
