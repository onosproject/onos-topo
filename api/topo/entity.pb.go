// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/topo/entity.proto

// Package topo defines interfaces for managing entities.

package topo

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AddEntityReq adds a entity to the topology
type AddEntityReq struct {
	Kind EntityKind `protobuf:"bytes,1,opt,name=kind,proto3,casttype=EntityKind" json:"kind,omitempty"`
	Id   EntityID   `protobuf:"bytes,2,opt,name=id,proto3,casttype=EntityID" json:"id,omitempty"`
}

func (m *AddEntityReq) Reset()         { *m = AddEntityReq{} }
func (m *AddEntityReq) String() string { return proto.CompactTextString(m) }
func (*AddEntityReq) ProtoMessage()    {}
func (*AddEntityReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_68b7f5f1cb9f621b, []int{0}
}
func (m *AddEntityReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddEntityReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddEntityReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddEntityReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddEntityReq.Merge(m, src)
}
func (m *AddEntityReq) XXX_Size() int {
	return m.Size()
}
func (m *AddEntityReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddEntityReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddEntityReq proto.InternalMessageInfo

func (m *AddEntityReq) GetKind() EntityKind {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *AddEntityReq) GetId() EntityID {
	if m != nil {
		return m.Id
	}
	return ""
}

// AddEntityRespose is sent in response to an AddEntityReq
type AddEntityRespose struct {
}

func (m *AddEntityRespose) Reset()         { *m = AddEntityRespose{} }
func (m *AddEntityRespose) String() string { return proto.CompactTextString(m) }
func (*AddEntityRespose) ProtoMessage()    {}
func (*AddEntityRespose) Descriptor() ([]byte, []int) {
	return fileDescriptor_68b7f5f1cb9f621b, []int{1}
}
func (m *AddEntityRespose) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddEntityRespose) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddEntityRespose.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddEntityRespose) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddEntityRespose.Merge(m, src)
}
func (m *AddEntityRespose) XXX_Size() int {
	return m.Size()
}
func (m *AddEntityRespose) XXX_DiscardUnknown() {
	xxx_messageInfo_AddEntityRespose.DiscardUnknown(m)
}

var xxx_messageInfo_AddEntityRespose proto.InternalMessageInfo

// UpdateEntityReq updates a entity
type UpdateEntityReq struct {
	Kind EntityKind `protobuf:"bytes,1,opt,name=kind,proto3,casttype=EntityKind" json:"kind,omitempty"`
	Id   EntityID   `protobuf:"bytes,2,opt,name=id,proto3,casttype=EntityID" json:"id,omitempty"`
}

func (m *UpdateEntityReq) Reset()         { *m = UpdateEntityReq{} }
func (m *UpdateEntityReq) String() string { return proto.CompactTextString(m) }
func (*UpdateEntityReq) ProtoMessage()    {}
func (*UpdateEntityReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_68b7f5f1cb9f621b, []int{2}
}
func (m *UpdateEntityReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateEntityReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateEntityReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateEntityReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateEntityReq.Merge(m, src)
}
func (m *UpdateEntityReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateEntityReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateEntityReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateEntityReq proto.InternalMessageInfo

func (m *UpdateEntityReq) GetKind() EntityKind {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *UpdateEntityReq) GetId() EntityID {
	if m != nil {
		return m.Id
	}
	return ""
}

// UpdateEntityResp is sent in response to an UpdateEntityReq
type UpdateEntityResp struct {
}

func (m *UpdateEntityResp) Reset()         { *m = UpdateEntityResp{} }
func (m *UpdateEntityResp) String() string { return proto.CompactTextString(m) }
func (*UpdateEntityResp) ProtoMessage()    {}
func (*UpdateEntityResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_68b7f5f1cb9f621b, []int{3}
}
func (m *UpdateEntityResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateEntityResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateEntityResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateEntityResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateEntityResp.Merge(m, src)
}
func (m *UpdateEntityResp) XXX_Size() int {
	return m.Size()
}
func (m *UpdateEntityResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateEntityResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateEntityResp proto.InternalMessageInfo

// GetAttrReq ...
type GetAttrReq struct {
	Kind     EntityKind `protobuf:"bytes,1,opt,name=kind,proto3,casttype=EntityKind" json:"kind,omitempty"`
	Id       EntityID   `protobuf:"bytes,2,opt,name=id,proto3,casttype=EntityID" json:"id,omitempty"`
	AttrKind AttrKind   `protobuf:"bytes,3,opt,name=attrKind,proto3,casttype=AttrKind" json:"attrKind,omitempty"`
}

func (m *GetAttrReq) Reset()         { *m = GetAttrReq{} }
func (m *GetAttrReq) String() string { return proto.CompactTextString(m) }
func (*GetAttrReq) ProtoMessage()    {}
func (*GetAttrReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_68b7f5f1cb9f621b, []int{4}
}
func (m *GetAttrReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAttrReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAttrReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAttrReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAttrReq.Merge(m, src)
}
func (m *GetAttrReq) XXX_Size() int {
	return m.Size()
}
func (m *GetAttrReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAttrReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetAttrReq proto.InternalMessageInfo

func (m *GetAttrReq) GetKind() EntityKind {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *GetAttrReq) GetId() EntityID {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GetAttrReq) GetAttrKind() AttrKind {
	if m != nil {
		return m.AttrKind
	}
	return ""
}

// GetAttrsResp carries a entity
type GetAttrResp struct {
	Kind EntityKind           `protobuf:"bytes,1,opt,name=kind,proto3,casttype=EntityKind" json:"kind,omitempty"`
	Id   EntityID             `protobuf:"bytes,2,opt,name=id,proto3,casttype=EntityID" json:"id,omitempty"`
	Attr map[AttrKind]AttrVal `protobuf:"bytes,3,rep,name=attr,proto3,castkey=AttrKind,castvalue=AttrVal" json:"attr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *GetAttrResp) Reset()         { *m = GetAttrResp{} }
func (m *GetAttrResp) String() string { return proto.CompactTextString(m) }
func (*GetAttrResp) ProtoMessage()    {}
func (*GetAttrResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_68b7f5f1cb9f621b, []int{5}
}
func (m *GetAttrResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAttrResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAttrResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAttrResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAttrResp.Merge(m, src)
}
func (m *GetAttrResp) XXX_Size() int {
	return m.Size()
}
func (m *GetAttrResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAttrResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetAttrResp proto.InternalMessageInfo

func (m *GetAttrResp) GetKind() EntityKind {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *GetAttrResp) GetId() EntityID {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GetAttrResp) GetAttr() map[AttrKind]AttrVal {
	if m != nil {
		return m.Attr
	}
	return nil
}

// RemoveEntityReq removes a entity by ID
type RemoveEntityReq struct {
	Kind EntityKind `protobuf:"bytes,1,opt,name=kind,proto3,casttype=EntityKind" json:"kind,omitempty"`
	Id   EntityID   `protobuf:"bytes,2,opt,name=id,proto3,casttype=EntityID" json:"id,omitempty"`
}

func (m *RemoveEntityReq) Reset()         { *m = RemoveEntityReq{} }
func (m *RemoveEntityReq) String() string { return proto.CompactTextString(m) }
func (*RemoveEntityReq) ProtoMessage()    {}
func (*RemoveEntityReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_68b7f5f1cb9f621b, []int{6}
}
func (m *RemoveEntityReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveEntityReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveEntityReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveEntityReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveEntityReq.Merge(m, src)
}
func (m *RemoveEntityReq) XXX_Size() int {
	return m.Size()
}
func (m *RemoveEntityReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveEntityReq.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveEntityReq proto.InternalMessageInfo

func (m *RemoveEntityReq) GetKind() EntityKind {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *RemoveEntityReq) GetId() EntityID {
	if m != nil {
		return m.Id
	}
	return ""
}

// RemoveEntityResp is sent in response to a RemoveEntityReq
type RemoveEntityResp struct {
}

func (m *RemoveEntityResp) Reset()         { *m = RemoveEntityResp{} }
func (m *RemoveEntityResp) String() string { return proto.CompactTextString(m) }
func (*RemoveEntityResp) ProtoMessage()    {}
func (*RemoveEntityResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_68b7f5f1cb9f621b, []int{7}
}
func (m *RemoveEntityResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveEntityResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveEntityResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveEntityResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveEntityResp.Merge(m, src)
}
func (m *RemoveEntityResp) XXX_Size() int {
	return m.Size()
}
func (m *RemoveEntityResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveEntityResp.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveEntityResp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AddEntityReq)(nil), "topo.AddEntityReq")
	proto.RegisterType((*AddEntityRespose)(nil), "topo.AddEntityRespose")
	proto.RegisterType((*UpdateEntityReq)(nil), "topo.UpdateEntityReq")
	proto.RegisterType((*UpdateEntityResp)(nil), "topo.UpdateEntityResp")
	proto.RegisterType((*GetAttrReq)(nil), "topo.GetAttrReq")
	proto.RegisterType((*GetAttrResp)(nil), "topo.GetAttrResp")
	proto.RegisterMapType((map[AttrKind]AttrVal)(nil), "topo.GetAttrResp.AttrEntry")
	proto.RegisterType((*RemoveEntityReq)(nil), "topo.RemoveEntityReq")
	proto.RegisterType((*RemoveEntityResp)(nil), "topo.RemoveEntityResp")
}

func init() { proto.RegisterFile("api/topo/entity.proto", fileDescriptor_68b7f5f1cb9f621b) }

var fileDescriptor_68b7f5f1cb9f621b = []byte{
	// 415 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0xbb, 0x8e, 0xd3, 0x40,
	0x14, 0xf5, 0xd8, 0x61, 0x1f, 0x77, 0x03, 0x84, 0xd1, 0x2e, 0x58, 0x06, 0x39, 0xab, 0xa9, 0x52,
	0x39, 0x68, 0x53, 0xf0, 0x68, 0x90, 0x23, 0x22, 0x40, 0x34, 0x68, 0x22, 0xe8, 0x0d, 0x33, 0x8a,
	0xac, 0x04, 0xcf, 0xc4, 0x1e, 0x22, 0xd2, 0x52, 0x52, 0xf1, 0x59, 0x94, 0x11, 0x15, 0x55, 0x82,
	0x92, 0x3f, 0xa0, 0x4c, 0xb5, 0x1a, 0x4f, 0x1e, 0x8e, 0xd3, 0xba, 0xbb, 0xbe, 0xf7, 0xf8, 0x9c,
	0xfb, 0x38, 0x03, 0x57, 0x91, 0x8c, 0xdb, 0x4a, 0x48, 0xd1, 0xe6, 0x89, 0x8a, 0xd5, 0x34, 0x90,
	0xa9, 0x50, 0x02, 0xd7, 0x74, 0xca, 0xbb, 0x1c, 0x88, 0x81, 0xc8, 0x13, 0x6d, 0x1d, 0x99, 0x1a,
	0xf9, 0x00, 0xf5, 0x90, 0xb1, 0x5e, 0x0e, 0xa7, 0x7c, 0x8c, 0x09, 0xd4, 0x86, 0x71, 0xc2, 0x5c,
	0x74, 0x8d, 0x5a, 0xe7, 0xdd, 0x7b, 0xeb, 0x79, 0x13, 0x4c, 0xf1, 0x7d, 0x9c, 0x30, 0x9a, 0xd7,
	0xf0, 0x13, 0xb0, 0x63, 0xe6, 0xda, 0x39, 0xa2, 0xbe, 0x9e, 0x37, 0xcf, 0x0c, 0xe2, 0xdd, 0x6b,
	0x6a, 0xc7, 0x8c, 0x60, 0x68, 0x14, 0x18, 0x33, 0x29, 0x32, 0x4e, 0xfa, 0x70, 0xff, 0xa3, 0x64,
	0x91, 0xe2, 0x15, 0x0b, 0x1d, 0x92, 0x66, 0x92, 0x7c, 0x07, 0x78, 0xc3, 0x55, 0xa8, 0x54, 0x5a,
	0x89, 0x06, 0x6e, 0xc1, 0x59, 0xa4, 0x54, 0xaa, 0xf1, 0xae, 0xb3, 0xc7, 0x84, 0x9b, 0x1c, 0xdd,
	0x55, 0xc9, 0x1f, 0x04, 0x17, 0x3b, 0xe9, 0x4c, 0x56, 0xa0, 0xfd, 0x16, 0x6a, 0x9a, 0xdd, 0x75,
	0xae, 0x9d, 0xd6, 0xc5, 0xcd, 0xe3, 0x40, 0x5f, 0x31, 0x28, 0x48, 0x04, 0x3a, 0xe8, 0x25, 0x2a,
	0x9d, 0x76, 0x1f, 0xfd, 0x58, 0xec, 0x9b, 0xfa, 0xb9, 0x68, 0x9e, 0xea, 0xf8, 0x53, 0x34, 0xa2,
	0x39, 0x83, 0xf7, 0x0c, 0xce, 0x77, 0x58, 0xdc, 0x00, 0x67, 0xc8, 0xa7, 0xa6, 0x2f, 0xaa, 0x43,
	0x7c, 0x09, 0x77, 0x26, 0xd1, 0xe8, 0x1b, 0x37, 0x9d, 0x50, 0xf3, 0xf1, 0xd2, 0x7e, 0x8e, 0xf4,
	0xdd, 0x28, 0xff, 0x2a, 0x26, 0x55, 0xdf, 0xed, 0x90, 0x34, 0x93, 0x37, 0xff, 0x11, 0xdc, 0x35,
	0x9e, 0xed, 0xf3, 0x74, 0x12, 0x7f, 0xe1, 0xb8, 0x03, 0x4e, 0xc8, 0x18, 0xc6, 0x66, 0xec, 0xa2,
	0x47, 0xbd, 0x87, 0x47, 0x39, 0xe3, 0x32, 0x0b, 0xbf, 0x80, 0x13, 0x63, 0x09, 0x7c, 0x65, 0x30,
	0x25, 0xd7, 0x6d, 0x7f, 0x3d, 0xf2, 0x8d, 0x85, 0x9f, 0xc2, 0xe9, 0x66, 0xb7, 0xb8, 0x51, 0x5a,
	0xf5, 0xd8, 0x7b, 0x70, 0xb4, 0x7c, 0x62, 0xe1, 0x57, 0x50, 0x2f, 0xce, 0xb1, 0x95, 0x2c, 0x2d,
	0x6c, 0x2b, 0x59, 0x1e, 0x99, 0x58, 0x5d, 0xf7, 0xf7, 0xd2, 0x47, 0xb3, 0xa5, 0x8f, 0xfe, 0x2d,
	0x7d, 0xf4, 0x6b, 0xe5, 0x5b, 0xb3, 0x95, 0x6f, 0xfd, 0x5d, 0xf9, 0xd6, 0xe7, 0x93, 0xfc, 0x71,
	0x76, 0x6e, 0x03, 0x00, 0x00, 0xff, 0xff, 0xe1, 0x1c, 0x55, 0x11, 0xd1, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EntityServiceClient is the client API for EntityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EntityServiceClient interface {
	// Add adds a entity to the topology
	Add(ctx context.Context, in *AddEntityReq, opts ...grpc.CallOption) (*AddEntityRespose, error)
	// Update updates a entity
	Update(ctx context.Context, in *UpdateEntityReq, opts ...grpc.CallOption) (*UpdateEntityResp, error)
	// Get gets a entity by ID
	GetAttr(ctx context.Context, in *GetAttrReq, opts ...grpc.CallOption) (*GetAttrResp, error)
	// Remove removes a entity from the topology
	RemoveEntity(ctx context.Context, in *RemoveEntityReq, opts ...grpc.CallOption) (*RemoveEntityResp, error)
}

type entityServiceClient struct {
	cc *grpc.ClientConn
}

func NewEntityServiceClient(cc *grpc.ClientConn) EntityServiceClient {
	return &entityServiceClient{cc}
}

func (c *entityServiceClient) Add(ctx context.Context, in *AddEntityReq, opts ...grpc.CallOption) (*AddEntityRespose, error) {
	out := new(AddEntityRespose)
	err := c.cc.Invoke(ctx, "/topo.entityService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) Update(ctx context.Context, in *UpdateEntityReq, opts ...grpc.CallOption) (*UpdateEntityResp, error) {
	out := new(UpdateEntityResp)
	err := c.cc.Invoke(ctx, "/topo.entityService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) GetAttr(ctx context.Context, in *GetAttrReq, opts ...grpc.CallOption) (*GetAttrResp, error) {
	out := new(GetAttrResp)
	err := c.cc.Invoke(ctx, "/topo.entityService/GetAttr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) RemoveEntity(ctx context.Context, in *RemoveEntityReq, opts ...grpc.CallOption) (*RemoveEntityResp, error) {
	out := new(RemoveEntityResp)
	err := c.cc.Invoke(ctx, "/topo.entityService/RemoveEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntityServiceServer is the server API for EntityService service.
type EntityServiceServer interface {
	// Add adds a entity to the topology
	Add(context.Context, *AddEntityReq) (*AddEntityRespose, error)
	// Update updates a entity
	Update(context.Context, *UpdateEntityReq) (*UpdateEntityResp, error)
	// Get gets a entity by ID
	GetAttr(context.Context, *GetAttrReq) (*GetAttrResp, error)
	// Remove removes a entity from the topology
	RemoveEntity(context.Context, *RemoveEntityReq) (*RemoveEntityResp, error)
}

// UnimplementedEntityServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEntityServiceServer struct {
}

func (*UnimplementedEntityServiceServer) Add(ctx context.Context, req *AddEntityReq) (*AddEntityRespose, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedEntityServiceServer) Update(ctx context.Context, req *UpdateEntityReq) (*UpdateEntityResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedEntityServiceServer) GetAttr(ctx context.Context, req *GetAttrReq) (*GetAttrResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttr not implemented")
}
func (*UnimplementedEntityServiceServer) RemoveEntity(ctx context.Context, req *RemoveEntityReq) (*RemoveEntityResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveEntity not implemented")
}

func RegisterEntityServiceServer(s *grpc.Server, srv EntityServiceServer) {
	s.RegisterService(&_EntityService_serviceDesc, srv)
}

func _EntityService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEntityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/topo.entityService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).Add(ctx, req.(*AddEntityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/topo.entityService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).Update(ctx, req.(*UpdateEntityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_GetAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).GetAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/topo.entityService/GetAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).GetAttr(ctx, req.(*GetAttrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_RemoveEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveEntityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).RemoveEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/topo.entityService/RemoveEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).RemoveEntity(ctx, req.(*RemoveEntityReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _EntityService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "topo.entityService",
	HandlerType: (*EntityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _EntityService_Add_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _EntityService_Update_Handler,
		},
		{
			MethodName: "GetAttr",
			Handler:    _EntityService_GetAttr_Handler,
		},
		{
			MethodName: "RemoveEntity",
			Handler:    _EntityService_RemoveEntity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/topo/entity.proto",
}

func (m *AddEntityReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddEntityReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddEntityReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Kind) > 0 {
		i -= len(m.Kind)
		copy(dAtA[i:], m.Kind)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Kind)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddEntityRespose) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddEntityRespose) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddEntityRespose) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UpdateEntityReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateEntityReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateEntityReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Kind) > 0 {
		i -= len(m.Kind)
		copy(dAtA[i:], m.Kind)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Kind)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateEntityResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateEntityResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateEntityResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetAttrReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAttrReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAttrReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AttrKind) > 0 {
		i -= len(m.AttrKind)
		copy(dAtA[i:], m.AttrKind)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.AttrKind)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Kind) > 0 {
		i -= len(m.Kind)
		copy(dAtA[i:], m.Kind)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Kind)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAttrResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAttrResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAttrResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attr) > 0 {
		for k := range m.Attr {
			v := m.Attr[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintEntity(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintEntity(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintEntity(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Kind) > 0 {
		i -= len(m.Kind)
		copy(dAtA[i:], m.Kind)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Kind)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveEntityReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveEntityReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveEntityReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Kind) > 0 {
		i -= len(m.Kind)
		copy(dAtA[i:], m.Kind)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Kind)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveEntityResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveEntityResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveEntityResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintEntity(dAtA []byte, offset int, v uint64) int {
	offset -= sovEntity(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AddEntityReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *AddEntityRespose) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UpdateEntityReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *UpdateEntityResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetAttrReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.AttrKind)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *GetAttrResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	if len(m.Attr) > 0 {
		for k, v := range m.Attr {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovEntity(uint64(len(k))) + 1 + len(v) + sovEntity(uint64(len(v)))
			n += mapEntrySize + 1 + sovEntity(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *RemoveEntityReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *RemoveEntityResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovEntity(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEntity(x uint64) (n int) {
	return sovEntity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddEntityReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddEntityReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddEntityReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = EntityKind(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = EntityID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddEntityRespose) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddEntityRespose: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddEntityRespose: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateEntityReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateEntityReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateEntityReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = EntityKind(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = EntityID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateEntityResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateEntityResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateEntityResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAttrReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAttrReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAttrReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = EntityKind(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = EntityID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttrKind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttrKind = AttrKind(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAttrResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAttrResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAttrResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = EntityKind(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = EntityID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attr == nil {
				m.Attr = make(map[AttrKind]AttrVal)
			}
			var mapkey AttrKind
			var mapvalue AttrVal
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEntity
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEntity
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthEntity
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthEntity
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = AttrKind(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEntity
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthEntity
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthEntity
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = AttrVal(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipEntity(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthEntity
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attr[AttrKind(mapkey)] = ((AttrVal)(mapvalue))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveEntityReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveEntityReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveEntityReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = EntityKind(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = EntityID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveEntityResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveEntityResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveEntityResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEntity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEntity
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEntity
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEntity
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEntity        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEntity          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEntity = fmt.Errorf("proto: unexpected end of group")
)
