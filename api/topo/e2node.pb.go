// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/topo/e2node.proto

// Package topo.device defines interfaces for managing devices.

package topo

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// E2Node contains information about a E2 Node device
type E2Node struct {
}

func (m *E2Node) Reset()         { *m = E2Node{} }
func (m *E2Node) String() string { return proto.CompactTextString(m) }
func (*E2Node) ProtoMessage()    {}
func (*E2Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1a916fbae0178b5, []int{0}
}
func (m *E2Node) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2Node.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2Node.Merge(m, src)
}
func (m *E2Node) XXX_Size() int {
	return m.Size()
}
func (m *E2Node) XXX_DiscardUnknown() {
	xxx_messageInfo_E2Node.DiscardUnknown(m)
}

var xxx_messageInfo_E2Node proto.InternalMessageInfo

type E2Node_Interfaces struct {
	E2 []*E2Interface `protobuf:"bytes,1,rep,name=e2,proto3" json:"e2,omitempty"`
}

func (m *E2Node_Interfaces) Reset()         { *m = E2Node_Interfaces{} }
func (m *E2Node_Interfaces) String() string { return proto.CompactTextString(m) }
func (*E2Node_Interfaces) ProtoMessage()    {}
func (*E2Node_Interfaces) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1a916fbae0178b5, []int{0, 0}
}
func (m *E2Node_Interfaces) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2Node_Interfaces) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2Node_Interfaces.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2Node_Interfaces) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2Node_Interfaces.Merge(m, src)
}
func (m *E2Node_Interfaces) XXX_Size() int {
	return m.Size()
}
func (m *E2Node_Interfaces) XXX_DiscardUnknown() {
	xxx_messageInfo_E2Node_Interfaces.DiscardUnknown(m)
}

var xxx_messageInfo_E2Node_Interfaces proto.InternalMessageInfo

func (m *E2Node_Interfaces) GetE2() []*E2Interface {
	if m != nil {
		return m.E2
	}
	return nil
}

func init() {
	proto.RegisterType((*E2Node)(nil), "topo.E2Node")
	proto.RegisterType((*E2Node_Interfaces)(nil), "topo.E2Node.Interfaces")
}

func init() { proto.RegisterFile("api/topo/e2node.proto", fileDescriptor_c1a916fbae0178b5) }

var fileDescriptor_c1a916fbae0178b5 = []byte{
	// 141 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4d, 0x2c, 0xc8, 0xd4,
	0x2f, 0xc9, 0x2f, 0xc8, 0xd7, 0x4f, 0x35, 0xca, 0xcb, 0x4f, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x62, 0x01, 0x09, 0x49, 0x49, 0x21, 0x49, 0x66, 0xe6, 0x95, 0xa4, 0x16, 0xa5, 0x25,
	0x26, 0x43, 0x55, 0x28, 0x59, 0x72, 0xb1, 0xb9, 0x1a, 0xf9, 0xe5, 0xa7, 0xa4, 0x4a, 0xe9, 0x73,
	0x71, 0x79, 0xc2, 0x24, 0x8b, 0x85, 0x14, 0xb9, 0x98, 0x52, 0x8d, 0x24, 0x18, 0x15, 0x98, 0x35,
	0xb8, 0x8d, 0x04, 0xf5, 0x40, 0x9a, 0xf5, 0x5c, 0x8d, 0xe0, 0xf2, 0x41, 0x4c, 0xa9, 0x46, 0x4e,
	0x12, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7,
	0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x90, 0xc4, 0x06, 0x36, 0xdb, 0x18,
	0x10, 0x00, 0x00, 0xff, 0xff, 0x56, 0xe6, 0x61, 0x32, 0x96, 0x00, 0x00, 0x00,
}

func (m *E2Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2Node) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2Node) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *E2Node_Interfaces) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2Node_Interfaces) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2Node_Interfaces) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.E2) > 0 {
		for iNdEx := len(m.E2) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.E2[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintE2Node(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintE2Node(dAtA []byte, offset int, v uint64) int {
	offset -= sovE2Node(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *E2Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *E2Node_Interfaces) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.E2) > 0 {
		for _, e := range m.E2 {
			l = e.Size()
			n += 1 + l + sovE2Node(uint64(l))
		}
	}
	return n
}

func sovE2Node(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozE2Node(x uint64) (n int) {
	return sovE2Node(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *E2Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2Node
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipE2Node(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2Node
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2Node
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2Node_Interfaces) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2Node
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Interfaces: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Interfaces: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field E2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2Node
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2Node
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2Node
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.E2 = append(m.E2, &E2Interface{})
			if err := m.E2[len(m.E2)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2Node(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2Node
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2Node
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipE2Node(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowE2Node
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowE2Node
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowE2Node
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthE2Node
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupE2Node
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthE2Node
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthE2Node        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowE2Node          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupE2Node = fmt.Errorf("proto: unexpected end of group")
)
